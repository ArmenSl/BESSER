{# Django model template generator #}

{% import "django_fields.py.j2" as django_fields %}
{# django_fields.j2 contains mappings to Django's ORM field types #}
from django.db import models

{% set ns = namespace(processed_associations=[]) %}

{% for class_obj in model.get_classes() %}
class {{ class_obj.name|capitalize }}(models.Model):
    {% for attr in class_obj.all_attributes() %}
    {{ attr.name }} = {{ django_fields.get_field(attr.type.name, attr.properties) }}
    {%- endfor %}
    {% for end in class_obj.association_ends() -%}
        {% set association = end.owner %}
        {% if association not in ns.processed_associations %}
            {% if association.ends|length == 2 -%}
                {% set end1 = end %}
                {% set end2 = association.ends|list|reject("equalto", end)|list|first%}
                {# {% set end2 = ends|first %} #}
                {% set class1_name = end1.type.name %}
                {% set class2_name = end2.type.name %}
                {% if end1.multiplicity.max > 1 and end2.multiplicity.max > 1 -%}
                {# N:M Relationship: Use ManyToManyField in Django #}
    {{ class1_name.lower() }} = models.ManyToManyField({{ class1_name|capitalize }})
                    {% set _ = ns.processed_associations.append(association)%}
                {%- elif end1.multiplicity.max == 1 and end2.multiplicity.max > 1 %}
                {# 1:N Relationship: Use ForeignKey in Django #}
    {{ class1_name.lower() }} = models.ForeignKey({{ class1_name|capitalize }}, on_delete=models.CASCADE)
                    {% set _ = ns.processed_associations.append(association)%}
                {% elif end1.multiplicity.max == 1 and end2.multiplicity.max == 1 %}
                {# 1:1 Relationship: Use OneToOneField in Django #}
    {{ class1_name.lower() }} = models.OneToOneField({{ class1_name|capitalize }}, on_delete=models.CASCADE)
                    {% set _ = ns.processed_associations.append(association)%}
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}

    def __str__(self):
        return str(self.id)

{% endfor %}

{% for association in model.associations %}
    {% if association.ends|length > 2 %}
        {# Convert Nary relationship to Binary relationships with intermediate table #}
class {{ association.name|capitalize }}(models.Model):
    {% for end in association.ends %}
        {% set class_name = end.type.name %}
        {% if end.multiplicity.max > 1 %}
        {# N:M Relationship: Use ForeignKey in Django for intermediate table #}
    {{ class_name.lower() }} = models.ManyToManyField({{ class_name|capitalize }}, on_delete=models.CASCADE)
        {% else %}
        {# 1:N Relationship: Use ForeignKey in Django for intermediate table #}
    {{ class_name.lower() }} = models.ForeignKey({{ class_name|capitalize }}, on_delete=models.CASCADE)
        {% endif %}
    {% endfor %}
    {% endif %}
{% endfor %}

