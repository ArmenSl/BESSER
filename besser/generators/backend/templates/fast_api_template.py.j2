import uvicorn
import os, json
from fastapi import Depends, FastAPI, HTTPException
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker
from pydantic_classes import *
from sql_alchemy import *

############################################
#
#   Initialize the database
#
############################################

SQLALCHEMY_DATABASE_URL = "sqlite:///./database.db"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base.metadata.create_all(bind=engine)


app = FastAPI()

# Initialize database session
def get_db():
    database = SessionLocal()
    yield database
    database.close()

{% for class in classes %}
############################################
#
#   {{ class.name }} functions
#
############################################

{% if "GET" in http_methods %}
@app.get("/{{ class.name | lower}}/", response_model=None)
def get_all_{{ class.name | lower}}(database: Session = Depends(get_db)) -> list[{{ class.name }}]:
    {{ class.name | lower}}_list = database.query({{ class.name }}).all()
    return {{ class.name | lower}}_list


@app.get("/{{ class.name | lower}}/{% raw %}{{% endraw %}{{ class.name | lower}}_id{% raw %}}{% endraw %}/", response_model=None)
async def get_{{ class.name | lower}}({{ class.name | lower}}_id: int, database: Session = Depends(get_db)) -> {{ class.name }}:
    db_{{ class.name | lower}} = database.query({{ class.name }}).filter({{ class.name }}.id == {{ class.name | lower}}_id).first()
    if db_{{ class.name | lower}} is None:
        raise HTTPException(status_code=404, detail="{{ class.name }} not found")
    return db_{{ class.name | lower}}

{% endif %}

{% if "POST" in http_methods %}
@app.post("/{{ class.name | lower}}/", response_model=None)
async def create_{{ class.name | lower}}({{ class.name | lower}}: {{ class.name }}Create, database: Session = Depends(get_db)) -> {{ class.name }}:
    db_{{ class.name | lower}} = {{ class.name }}(**{{ class.name | lower}}.dict())
    database.add(db_{{ class.name | lower}})
    database.commit()
    database.refresh(db_{{ class.name | lower}})
    return db_{{ class.name | lower}}
{% endif %}

{% if "PUT" in http_methods %}
{% if class.is_read_only == False %}
@app.put("/{{ class.name | lower}}/{% raw %}{{% endraw %}{{ class.name | lower}}_id{% raw %}}{% endraw %}/", response_model=None)
async def update_{{ class.name | lower}}({{ class.name | lower}}_id: int, {{ class.name | lower}}: {{ class.name }}Create, database: Session = Depends(get_db)) -> {{ class.name }}:
    db_{{ class.name | lower}} = database.query({{ class.name }}).filter({{ class.name }}.id == {{ class.name | lower}}_id).first()
    if db_{{ class.name | lower}} is None:
        raise HTTPException(status_code=404, detail="{{ class.name }} not found")

    for key, value in {{ class.name | lower}}.dict().items():
        setattr(db_{{ class.name | lower}}, key, value)

    database.commit()
    database.refresh(db_{{ class.name | lower}})
    return db_{{ class.name | lower}}
{% endif %}

{% if "DELETE" in http_methods %}
@app.delete("/{{ class.name | lower}}/{% raw %}{{% endraw %}{{ class.name | lower}}_id{% raw %}}{% endraw %}/", response_model=None)
async def delete_{{ class.name | lower}}({{ class.name | lower}}_id: int, database: Session = Depends(get_db)):
    db_{{ class.name | lower}} = database.query({{ class.name }}).filter({{ class.name }}.id == {{ class.name | lower}}_id).first()
    if db_{{ class.name | lower}} is None:
        raise HTTPException(status_code=404, detail="{{ class.name }} not found")
    database.delete(db_{{ class.name | lower}})
    database.commit()
    return db_{{ class.name | lower}}
{% endif %}


{% endif %}


{# Two newlines are added here unconditionally #}
{% endfor %}

{#def update_entity(class_name, class_list, id_attribute, attribute_to_change, updated_data):  maybe use this function to update the data in the classes and clear the code #}

############################################
# Maintaining the server
############################################
if __name__ == "__main__":
    import uvicorn
    openapi_schema = app.openapi()
    output_dir = os.path.join(os.getcwd(), 'output_backend')
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, 'openapi_specs.json')
    print(f"Writing OpenAPI schema to {output_file}")
    with open(output_file, 'w') as file:
        json.dump(openapi_schema, file)
    uvicorn.run(app, host="0.0.0.0", port=8000)




