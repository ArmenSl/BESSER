# Generated from OD.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,5,10,79,8,10,10,10,12,10,82,9,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,91,8,11,5,11,93,8,11,10,11,12,11,96,9,11,
        1,11,1,11,1,12,4,12,101,8,12,11,12,12,12,102,1,12,1,12,4,12,107,
        8,12,11,12,12,12,108,3,12,111,8,12,1,13,4,13,114,8,13,11,13,12,13,
        115,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,0,0,15,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,
        0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,
        92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        3,0,48,57,65,70,97,102,1,0,48,57,3,0,9,10,13,13,32,32,132,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,
        0,3,38,1,0,0,0,5,40,1,0,0,0,7,42,1,0,0,0,9,44,1,0,0,0,11,47,1,0,
        0,0,13,50,1,0,0,0,15,54,1,0,0,0,17,58,1,0,0,0,19,68,1,0,0,0,21,76,
        1,0,0,0,23,83,1,0,0,0,25,100,1,0,0,0,27,113,1,0,0,0,29,119,1,0,0,
        0,31,32,5,79,0,0,32,33,5,98,0,0,33,34,5,106,0,0,34,35,5,101,0,0,
        35,36,5,99,0,0,36,37,5,116,0,0,37,2,1,0,0,0,38,39,5,58,0,0,39,4,
        1,0,0,0,40,41,5,123,0,0,41,6,1,0,0,0,42,43,5,125,0,0,43,8,1,0,0,
        0,44,45,5,45,0,0,45,46,5,45,0,0,46,10,1,0,0,0,47,48,5,46,0,0,48,
        49,5,46,0,0,49,12,1,0,0,0,50,51,5,45,0,0,51,52,5,45,0,0,52,53,5,
        62,0,0,53,14,1,0,0,0,54,55,5,46,0,0,55,56,5,46,0,0,56,57,5,62,0,
        0,57,16,1,0,0,0,58,59,5,64,0,0,59,60,5,115,0,0,60,61,5,116,0,0,61,
        62,5,97,0,0,62,63,5,114,0,0,63,64,5,116,0,0,64,65,5,117,0,0,65,66,
        5,109,0,0,66,67,5,108,0,0,67,18,1,0,0,0,68,69,5,64,0,0,69,70,5,101,
        0,0,70,71,5,110,0,0,71,72,5,100,0,0,72,73,5,117,0,0,73,74,5,109,
        0,0,74,75,5,108,0,0,75,20,1,0,0,0,76,80,7,0,0,0,77,79,7,1,0,0,78,
        77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,22,1,0,0,
        0,82,80,1,0,0,0,83,94,5,34,0,0,84,93,8,2,0,0,85,90,5,92,0,0,86,91,
        7,3,0,0,87,88,5,117,0,0,88,89,7,4,0,0,89,91,6,11,0,0,90,86,1,0,0,
        0,90,87,1,0,0,0,91,93,1,0,0,0,92,84,1,0,0,0,92,85,1,0,0,0,93,96,
        1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,
        97,98,5,34,0,0,98,24,1,0,0,0,99,101,7,5,0,0,100,99,1,0,0,0,101,102,
        1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,110,1,0,0,0,104,106,
        5,46,0,0,105,107,7,5,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,
        1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,104,1,0,0,0,110,111,
        1,0,0,0,111,26,1,0,0,0,112,114,7,6,0,0,113,112,1,0,0,0,114,115,1,
        0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,118,6,
        13,1,0,118,28,1,0,0,0,119,120,3,25,12,0,120,121,5,47,0,0,121,122,
        3,25,12,0,122,123,5,47,0,0,123,124,3,25,12,0,124,30,1,0,0,0,9,0,
        80,90,92,94,102,108,110,115,2,1,11,0,6,0,0
    ]

class ODLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    Start = 9
    End = 10
    IDENTIFIER = 11
    STRING = 12
    NUMBER = 13
    WHITESPACE = 14
    DATE = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Object'", "':'", "'{'", "'}'", "'--'", "'..'", "'-->'", "'..>'", 
            "'@startuml'", "'@enduml'" ]

    symbolicNames = [ "<INVALID>",
            "Start", "End", "IDENTIFIER", "STRING", "NUMBER", "WHITESPACE", 
            "DATE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "Start", "End", "IDENTIFIER", "STRING", "NUMBER", 
                  "WHITESPACE", "DATE" ]

    grammarFileName = "OD.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[11] = self.STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            4
     


